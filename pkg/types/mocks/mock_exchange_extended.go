// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/c9s/bbgo/pkg/types (interfaces: ExchangeExtended)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_exchange_extended.go -package=mocks . ExchangeExtended
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/c9s/bbgo/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockExchangeExtended is a mock of ExchangeExtended interface.
type MockExchangeExtended struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeExtendedMockRecorder
	isgomock struct{}
}

// MockExchangeExtendedMockRecorder is the mock recorder for MockExchangeExtended.
type MockExchangeExtendedMockRecorder struct {
	mock *MockExchangeExtended
}

// NewMockExchangeExtended creates a new mock instance.
func NewMockExchangeExtended(ctrl *gomock.Controller) *MockExchangeExtended {
	mock := &MockExchangeExtended{ctrl: ctrl}
	mock.recorder = &MockExchangeExtendedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeExtended) EXPECT() *MockExchangeExtendedMockRecorder {
	return m.recorder
}

// CancelOrders mocks base method.
func (m *MockExchangeExtended) CancelOrders(ctx context.Context, orders ...types.Order) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range orders {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelOrders", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrders indicates an expected call of CancelOrders.
func (mr *MockExchangeExtendedMockRecorder) CancelOrders(ctx any, orders ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, orders...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrders", reflect.TypeOf((*MockExchangeExtended)(nil).CancelOrders), varargs...)
}

// Name mocks base method.
func (m *MockExchangeExtended) Name() types.ExchangeName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(types.ExchangeName)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockExchangeExtendedMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockExchangeExtended)(nil).Name))
}

// NewStream mocks base method.
func (m *MockExchangeExtended) NewStream() types.Stream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStream")
	ret0, _ := ret[0].(types.Stream)
	return ret0
}

// NewStream indicates an expected call of NewStream.
func (mr *MockExchangeExtendedMockRecorder) NewStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStream", reflect.TypeOf((*MockExchangeExtended)(nil).NewStream))
}

// PlatformFeeCurrency mocks base method.
func (m *MockExchangeExtended) PlatformFeeCurrency() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlatformFeeCurrency")
	ret0, _ := ret[0].(string)
	return ret0
}

// PlatformFeeCurrency indicates an expected call of PlatformFeeCurrency.
func (mr *MockExchangeExtendedMockRecorder) PlatformFeeCurrency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlatformFeeCurrency", reflect.TypeOf((*MockExchangeExtended)(nil).PlatformFeeCurrency))
}

// QueryAccount mocks base method.
func (m *MockExchangeExtended) QueryAccount(ctx context.Context) (*types.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccount", ctx)
	ret0, _ := ret[0].(*types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAccount indicates an expected call of QueryAccount.
func (mr *MockExchangeExtendedMockRecorder) QueryAccount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccount", reflect.TypeOf((*MockExchangeExtended)(nil).QueryAccount), ctx)
}

// QueryAccountBalances mocks base method.
func (m *MockExchangeExtended) QueryAccountBalances(ctx context.Context) (types.BalanceMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccountBalances", ctx)
	ret0, _ := ret[0].(types.BalanceMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAccountBalances indicates an expected call of QueryAccountBalances.
func (mr *MockExchangeExtendedMockRecorder) QueryAccountBalances(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccountBalances", reflect.TypeOf((*MockExchangeExtended)(nil).QueryAccountBalances), ctx)
}

// QueryKLines mocks base method.
func (m *MockExchangeExtended) QueryKLines(ctx context.Context, symbol string, interval types.Interval, options types.KLineQueryOptions) ([]types.KLine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryKLines", ctx, symbol, interval, options)
	ret0, _ := ret[0].([]types.KLine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryKLines indicates an expected call of QueryKLines.
func (mr *MockExchangeExtendedMockRecorder) QueryKLines(ctx, symbol, interval, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryKLines", reflect.TypeOf((*MockExchangeExtended)(nil).QueryKLines), ctx, symbol, interval, options)
}

// QueryMarkets mocks base method.
func (m *MockExchangeExtended) QueryMarkets(ctx context.Context) (types.MarketMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMarkets", ctx)
	ret0, _ := ret[0].(types.MarketMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMarkets indicates an expected call of QueryMarkets.
func (mr *MockExchangeExtendedMockRecorder) QueryMarkets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMarkets", reflect.TypeOf((*MockExchangeExtended)(nil).QueryMarkets), ctx)
}

// QueryOpenOrders mocks base method.
func (m *MockExchangeExtended) QueryOpenOrders(ctx context.Context, symbol string) ([]types.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryOpenOrders", ctx, symbol)
	ret0, _ := ret[0].([]types.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryOpenOrders indicates an expected call of QueryOpenOrders.
func (mr *MockExchangeExtendedMockRecorder) QueryOpenOrders(ctx, symbol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOpenOrders", reflect.TypeOf((*MockExchangeExtended)(nil).QueryOpenOrders), ctx, symbol)
}

// QueryOrder mocks base method.
func (m *MockExchangeExtended) QueryOrder(ctx context.Context, q types.OrderQuery) (*types.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryOrder", ctx, q)
	ret0, _ := ret[0].(*types.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryOrder indicates an expected call of QueryOrder.
func (mr *MockExchangeExtendedMockRecorder) QueryOrder(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOrder", reflect.TypeOf((*MockExchangeExtended)(nil).QueryOrder), ctx, q)
}

// QueryOrderTrades mocks base method.
func (m *MockExchangeExtended) QueryOrderTrades(ctx context.Context, q types.OrderQuery) ([]types.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryOrderTrades", ctx, q)
	ret0, _ := ret[0].([]types.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryOrderTrades indicates an expected call of QueryOrderTrades.
func (mr *MockExchangeExtendedMockRecorder) QueryOrderTrades(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOrderTrades", reflect.TypeOf((*MockExchangeExtended)(nil).QueryOrderTrades), ctx, q)
}

// QueryTicker mocks base method.
func (m *MockExchangeExtended) QueryTicker(ctx context.Context, symbol string) (*types.Ticker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTicker", ctx, symbol)
	ret0, _ := ret[0].(*types.Ticker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTicker indicates an expected call of QueryTicker.
func (mr *MockExchangeExtendedMockRecorder) QueryTicker(ctx, symbol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTicker", reflect.TypeOf((*MockExchangeExtended)(nil).QueryTicker), ctx, symbol)
}

// QueryTickers mocks base method.
func (m *MockExchangeExtended) QueryTickers(ctx context.Context, symbol ...string) (map[string]types.Ticker, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range symbol {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryTickers", varargs...)
	ret0, _ := ret[0].(map[string]types.Ticker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTickers indicates an expected call of QueryTickers.
func (mr *MockExchangeExtendedMockRecorder) QueryTickers(ctx any, symbol ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, symbol...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTickers", reflect.TypeOf((*MockExchangeExtended)(nil).QueryTickers), varargs...)
}

// SubmitOrder mocks base method.
func (m *MockExchangeExtended) SubmitOrder(ctx context.Context, order types.SubmitOrder) (*types.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitOrder", ctx, order)
	ret0, _ := ret[0].(*types.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitOrder indicates an expected call of SubmitOrder.
func (mr *MockExchangeExtendedMockRecorder) SubmitOrder(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitOrder", reflect.TypeOf((*MockExchangeExtended)(nil).SubmitOrder), ctx, order)
}
