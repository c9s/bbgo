// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/c9s/bbgo/pkg/types (interfaces: ExchangeOrderQueryService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/c9s/bbgo/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockExchangeOrderQueryService is a mock of ExchangeOrderQueryService interface.
type MockExchangeOrderQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeOrderQueryServiceMockRecorder
}

// MockExchangeOrderQueryServiceMockRecorder is the mock recorder for MockExchangeOrderQueryService.
type MockExchangeOrderQueryServiceMockRecorder struct {
	mock *MockExchangeOrderQueryService
}

// NewMockExchangeOrderQueryService creates a new mock instance.
func NewMockExchangeOrderQueryService(ctrl *gomock.Controller) *MockExchangeOrderQueryService {
	mock := &MockExchangeOrderQueryService{ctrl: ctrl}
	mock.recorder = &MockExchangeOrderQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeOrderQueryService) EXPECT() *MockExchangeOrderQueryServiceMockRecorder {
	return m.recorder
}

// QueryOrder mocks base method.
func (m *MockExchangeOrderQueryService) QueryOrder(arg0 context.Context, arg1 types.OrderQuery) (*types.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryOrder", arg0, arg1)
	ret0, _ := ret[0].(*types.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryOrder indicates an expected call of QueryOrder.
func (mr *MockExchangeOrderQueryServiceMockRecorder) QueryOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOrder", reflect.TypeOf((*MockExchangeOrderQueryService)(nil).QueryOrder), arg0, arg1)
}

// QueryOrderTrades mocks base method.
func (m *MockExchangeOrderQueryService) QueryOrderTrades(arg0 context.Context, arg1 types.OrderQuery) ([]types.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryOrderTrades", arg0, arg1)
	ret0, _ := ret[0].([]types.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryOrderTrades indicates an expected call of QueryOrderTrades.
func (mr *MockExchangeOrderQueryServiceMockRecorder) QueryOrderTrades(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOrderTrades", reflect.TypeOf((*MockExchangeOrderQueryService)(nil).QueryOrderTrades), arg0, arg1)
}
