// Code generated by "callbackgen -type StandardStream -interface"; DO NOT EDIT.

package types

import ()

func (stream *StandardStream) OnStart(cb func()) {
	stream.startCallbacks = append(stream.startCallbacks, cb)
}

func (stream *StandardStream) EmitStart() {
	for _, cb := range stream.startCallbacks {
		cb()
	}
}

func (stream *StandardStream) OnConnect(cb func()) {
	stream.connectCallbacks = append(stream.connectCallbacks, cb)
}

func (stream *StandardStream) EmitConnect() {
	for _, cb := range stream.connectCallbacks {
		cb()
	}
}

func (stream *StandardStream) OnDisconnect(cb func()) {
	stream.disconnectCallbacks = append(stream.disconnectCallbacks, cb)
}

func (stream *StandardStream) EmitDisconnect() {
	for _, cb := range stream.disconnectCallbacks {
		cb()
	}
}

func (stream *StandardStream) OnTradeUpdate(cb func(trade Trade)) {
	stream.tradeUpdateCallbacks = append(stream.tradeUpdateCallbacks, cb)
}

func (stream *StandardStream) EmitTradeUpdate(trade Trade) {
	for _, cb := range stream.tradeUpdateCallbacks {
		cb(trade)
	}
}

func (stream *StandardStream) OnOrderUpdate(cb func(order Order)) {
	stream.orderUpdateCallbacks = append(stream.orderUpdateCallbacks, cb)
}

func (stream *StandardStream) EmitOrderUpdate(order Order) {
	for _, cb := range stream.orderUpdateCallbacks {
		cb(order)
	}
}

func (stream *StandardStream) OnBalanceSnapshot(cb func(balances BalanceMap)) {
	stream.balanceSnapshotCallbacks = append(stream.balanceSnapshotCallbacks, cb)
}

func (stream *StandardStream) EmitBalanceSnapshot(balances BalanceMap) {
	for _, cb := range stream.balanceSnapshotCallbacks {
		cb(balances)
	}
}

func (stream *StandardStream) OnBalanceUpdate(cb func(balances BalanceMap)) {
	stream.balanceUpdateCallbacks = append(stream.balanceUpdateCallbacks, cb)
}

func (stream *StandardStream) EmitBalanceUpdate(balances BalanceMap) {
	for _, cb := range stream.balanceUpdateCallbacks {
		cb(balances)
	}
}

func (stream *StandardStream) OnKLineClosed(cb func(kline KLine)) {
	stream.kLineClosedCallbacks = append(stream.kLineClosedCallbacks, cb)
}

func (stream *StandardStream) EmitKLineClosed(kline KLine) {
	for _, cb := range stream.kLineClosedCallbacks {
		cb(kline)
	}
}

func (stream *StandardStream) OnKLine(cb func(kline KLine)) {
	stream.kLineCallbacks = append(stream.kLineCallbacks, cb)
}

func (stream *StandardStream) EmitKLine(kline KLine) {
	for _, cb := range stream.kLineCallbacks {
		cb(kline)
	}
}

func (stream *StandardStream) OnBookUpdate(cb func(book SliceOrderBook)) {
	stream.bookUpdateCallbacks = append(stream.bookUpdateCallbacks, cb)
}

func (stream *StandardStream) EmitBookUpdate(book SliceOrderBook) {
	for _, cb := range stream.bookUpdateCallbacks {
		cb(book)
	}
}

func (stream *StandardStream) OnBookSnapshot(cb func(book SliceOrderBook)) {
	stream.bookSnapshotCallbacks = append(stream.bookSnapshotCallbacks, cb)
}

func (stream *StandardStream) EmitBookSnapshot(book SliceOrderBook) {
	for _, cb := range stream.bookSnapshotCallbacks {
		cb(book)
	}
}

type StandardStreamEventHub interface {
	OnStart(cb func())

	OnConnect(cb func())

	OnDisconnect(cb func())

	OnTradeUpdate(cb func(trade Trade))

	OnOrderUpdate(cb func(order Order))

	OnBalanceSnapshot(cb func(balances BalanceMap))

	OnBalanceUpdate(cb func(balances BalanceMap))

	OnKLineClosed(cb func(kline KLine))

	OnKLine(cb func(kline KLine))

	OnBookUpdate(cb func(book SliceOrderBook))

	OnBookSnapshot(cb func(book SliceOrderBook))
}
