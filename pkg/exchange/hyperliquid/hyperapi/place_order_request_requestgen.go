// Code generated by "requestgen -method POST -responseType .APIResponse -responseDataField Response.Data -url /exchange -type PlaceOrderRequest -responseDataType OrderResponse"; DO NOT EDIT.

package hyperapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
)

func (p *PlaceOrderRequest) MetaType(metaType InfoReqType) *PlaceOrderRequest {
	p.metaType = metaType
	return p
}

func (p *PlaceOrderRequest) Orders(orders []struct {
	Asset         string  "json:\"a\""
	IsBuy         bool    "json:\"b\""
	Size          string  "json:\"s\""
	Price         string  "json:\"p\""
	ReduceOnly    bool    "json:\"r\""
	ClientOrderID *string "json:\"c\""
	OrderType     struct {
		Limit struct {
			Tif string "json:\"tif\" validValues:\"Alo,Ioc,Gtc\""
		} "json:\"limit\""
		Trigger struct {
			IsMarket  bool   "json:\"isMarket\""
			TriggerPx string "json:\"triggerPx\""
			Tpsl      string "json:\"tpsl\" validValues:\"tp,sl\""
		}
	} "json:\"t\""
}) *PlaceOrderRequest {
	p.orders = orders
	return p
}

func (p *PlaceOrderRequest) Grouping(grouping string) *PlaceOrderRequest {
	p.grouping = grouping
	return p
}

func (p *PlaceOrderRequest) Builder(builder struct {
	FeeAddress string "json:\"b\""
	FeeSize    string "json:\"f\""
}) *PlaceOrderRequest {
	p.builder = &builder
	return p
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (p *PlaceOrderRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		if p.isVarSlice(_v) {
			p.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (p *PlaceOrderRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check metaType field -> json key type
	metaType := p.metaType

	// TEMPLATE check-required
	if len(metaType) == 0 {
		metaType = "order"
	}
	// END TEMPLATE check-required

	// TEMPLATE check-valid-values
	switch metaType {
	case "order":
		params["type"] = metaType

	default:
		return nil, fmt.Errorf("type value %v is invalid", metaType)

	}
	// END TEMPLATE check-valid-values

	// assign parameter of metaType
	params["type"] = metaType
	// check orders field -> json key orders
	orders := p.orders

	// TEMPLATE check-required
	// END TEMPLATE check-required

	// assign parameter of orders
	params["orders"] = orders
	// check grouping field -> json key grouping
	grouping := p.grouping

	// TEMPLATE check-required
	if len(grouping) == 0 {
		grouping = "na"
	}
	// END TEMPLATE check-required

	// TEMPLATE check-valid-values
	switch grouping {
	case "na", "normalTpsl", "positionTpsl":
		params["grouping"] = grouping

	default:
		return nil, fmt.Errorf("grouping value %v is invalid", grouping)

	}
	// END TEMPLATE check-valid-values

	// assign parameter of grouping
	params["grouping"] = grouping
	// check builder field -> json key builder
	if p.builder != nil {
		builder := *p.builder

		// TEMPLATE check-required
		// END TEMPLATE check-required

		// assign parameter of builder
		params["builder"] = builder
	} else {
	}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (p *PlaceOrderRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := p.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if p.isVarSlice(_v) {
			p.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (p *PlaceOrderRequest) GetParametersJSON() ([]byte, error) {
	params, err := p.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (p *PlaceOrderRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (p *PlaceOrderRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (p *PlaceOrderRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (p *PlaceOrderRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (p *PlaceOrderRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := p.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (p *PlaceOrderRequest) GetPath() string {
	return "/exchange"
}

// Do generates the request object and send the request object to the API endpoint
func (p *PlaceOrderRequest) Do(ctx context.Context) (*OrderResponse, error) {

	params, err := p.GetParameters()
	if err != nil {
		return nil, err
	}
	query := url.Values{}

	var apiURL string

	apiURL = p.GetPath()

	req, err := p.client.NewAuthenticatedRequest(ctx, "POST", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := p.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse APIResponse

	type responseUnmarshaler interface {
		Unmarshal(data []byte) error
	}

	if unmarshaler, ok := interface{}(&apiResponse).(responseUnmarshaler); ok {
		if err := unmarshaler.Unmarshal(response.Body); err != nil {
			return nil, err
		}
	} else {
		// The line below checks the content type, however, some API server might not send the correct content type header,
		// Hence, this is commented for backward compatibility
		// response.IsJSON()
		if err := response.DecodeJSON(&apiResponse); err != nil {
			return nil, err
		}
	}

	type responseValidator interface {
		Validate() error
	}

	if validator, ok := interface{}(&apiResponse).(responseValidator); ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	var data OrderResponse
	if err := json.Unmarshal(apiResponse.Response.Data, &data); err != nil {
		return nil, err
	}
	return &data, nil
}
