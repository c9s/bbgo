// Code generated by "requestgen -method POST -url /info -type SpotGetMetaRequest -responseType SpotGetMetaResponse"; DO NOT EDIT.

package hyperapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
)

func (s *SpotGetMetaRequest) MetaType(metaType ReqTypeInfo) *SpotGetMetaRequest {
	s.metaType = metaType
	return s
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (s *SpotGetMetaRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		if s.isVarSlice(_v) {
			s.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (s *SpotGetMetaRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check metaType field -> json key type
	metaType := s.metaType

	// TEMPLATE check-required
	if len(metaType) == 0 {
		metaType = "spotMeta"
	}
	// END TEMPLATE check-required

	// TEMPLATE check-valid-values
	switch metaType {
	case "spotMeta":
		params["type"] = metaType

	default:
		return nil, fmt.Errorf("type value %v is invalid", metaType)

	}
	// END TEMPLATE check-valid-values

	// assign parameter of metaType
	params["type"] = metaType

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (s *SpotGetMetaRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := s.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if s.isVarSlice(_v) {
			s.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (s *SpotGetMetaRequest) GetParametersJSON() ([]byte, error) {
	params, err := s.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (s *SpotGetMetaRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (s *SpotGetMetaRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (s *SpotGetMetaRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (s *SpotGetMetaRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (s *SpotGetMetaRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := s.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (s *SpotGetMetaRequest) GetPath() string {
	return "/info"
}

// Do generates the request object and send the request object to the API endpoint
func (s *SpotGetMetaRequest) Do(ctx context.Context) (*SpotGetMetaResponse, error) {

	params, err := s.GetParameters()
	if err != nil {
		return nil, err
	}
	query := url.Values{}

	var apiURL string

	apiURL = s.GetPath()

	req, err := s.client.NewRequest(ctx, "POST", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := s.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse SpotGetMetaResponse

	type responseUnmarshaler interface {
		Unmarshal(data []byte) error
	}

	if unmarshaler, ok := interface{}(&apiResponse).(responseUnmarshaler); ok {
		if err := unmarshaler.Unmarshal(response.Body); err != nil {
			return nil, err
		}
	} else {
		// The line below checks the content type, however, some API server might not send the correct content type header,
		// Hence, this is commented for backward compatibility
		// response.IsJSON()
		if err := response.DecodeJSON(&apiResponse); err != nil {
			return nil, err
		}
	}

	type responseValidator interface {
		Validate() error
	}

	if validator, ok := interface{}(&apiResponse).(responseValidator); ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	return &apiResponse, nil
}
