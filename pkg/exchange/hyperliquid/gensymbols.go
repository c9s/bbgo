//go:build ignore
// +build ignore

package main

import (
	"context"
	"log"
	"os"
	"strconv"
	"text/template"

	"github.com/c9s/bbgo/pkg/exchange/hyperliquid"
	"github.com/c9s/bbgo/pkg/exchange/hyperliquid/hyperapi"
)

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package hyperliquid

var spotSymbolMap = map[string]string{
{{- range $k, $v := .spot }}
	{{ printf "%q" $k }}: {{ printf "%q" $v }},
{{- end }}
}

var futuresSymbolMap = map[string]string{
{{- range $k, $v := .futures }}
	{{ printf "%q" $k }}: {{ printf "%q" $v }},
{{- end }}
}

`))

func main() {
	ctx := context.Background()
	client := hyperapi.NewClient()

	spotMeta, err := client.NewSpotGetMetaRequest().Do(ctx)
	if err != nil {
		log.Fatal(err)
	}

	spotSymbolMap := map[string]string{}
	tokens := spotMeta.Tokens
	for _, s := range spotMeta.Universe {
		base, quote := tokens[s.Tokens[0]], tokens[s.Tokens[1]]
		spotSymbolMap[base.Name+quote.Name] = "@" + strconv.Itoa(s.Index)
	}

	futuresMeta, err := client.NewFuturesGetMetaRequest().Do(ctx)
	if err != nil {
		log.Fatal(err)
	}

	futuresSymbolMap := map[string]string{}
	for i, s := range futuresMeta.Universe {
		futuresSymbolMap[s.Name+hyperliquid.QuoteCurrency] = s.Name + "@" + strconv.Itoa(i)
	}

	f, err := os.Create("symbols.go")
	if err != nil {
		log.Fatal(err)
	}

	defer f.Close()

	err = packageTemplate.Execute(f, map[string]map[string]string{"spot": spotSymbolMap, "futures": futuresSymbolMap})
	if err != nil {
		log.Fatal(err)
	}
}
