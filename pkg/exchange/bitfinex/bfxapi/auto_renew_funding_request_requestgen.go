// Code generated by "requestgen -type AutoRenewFundingRequest -method POST -url /v2/auth/w/funding/auto -responseType .AutoRenewFundingResponse"; DO NOT EDIT.

package bfxapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
)

// Status sets status - 1 to activate, 0 to deactivate
func (a *AutoRenewFundingRequest) Status(status int32) *AutoRenewFundingRequest {
	a.status = status
	return a
}

// Currency sets currency is required, Defaults to USD
func (a *AutoRenewFundingRequest) Currency(currency string) *AutoRenewFundingRequest {
	a.currency = currency
	return a
}

// Amount sets amount is the amount to be auto-renewed (Minimum 50 USD equivalent). Defaultst to the amount currently provided if omitted.
func (a *AutoRenewFundingRequest) Amount(amount string) *AutoRenewFundingRequest {
	a.amount = &amount
	return a
}

// Rate sets rate is the percentage rate at which to auto-renew. (rate == 0 to renew at FRR). Defaults to FRR if omitted
func (a *AutoRenewFundingRequest) Rate(rate string) *AutoRenewFundingRequest {
	a.rate = &rate
	return a
}

// Period sets period Defaults to 2
func (a *AutoRenewFundingRequest) Period(period int) *AutoRenewFundingRequest {
	a.period = &period
	return a
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (a *AutoRenewFundingRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		if a.isVarSlice(_v) {
			a.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (a *AutoRenewFundingRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check status field -> json key status
	status := a.status

	// TEMPLATE check-required
	if status == 0 {
		return nil, fmt.Errorf("status is required, 0 given")
	}
	// END TEMPLATE check-required

	// assign parameter of status
	params["status"] = status
	// check currency field -> json key currency
	currency := a.currency

	// TEMPLATE check-required
	if len(currency) == 0 {
		return nil, fmt.Errorf("currency is required, empty string given")
	}
	// END TEMPLATE check-required

	// assign parameter of currency
	params["currency"] = currency
	// check amount field -> json key amount
	if a.amount != nil {
		amount := *a.amount

		// TEMPLATE check-required
		if len(amount) == 0 {
		}
		// END TEMPLATE check-required

		// assign parameter of amount
		params["amount"] = amount
	} else {
	}
	// check rate field -> json key rate
	if a.rate != nil {
		rate := *a.rate

		// TEMPLATE check-required
		if len(rate) == 0 {
		}
		// END TEMPLATE check-required

		// assign parameter of rate
		params["rate"] = rate
	} else {
	}
	// check period field -> json key period
	if a.period != nil {
		period := *a.period

		// TEMPLATE check-required
		if period == 0 {
		}
		// END TEMPLATE check-required

		// assign parameter of period
		params["period"] = period
	} else {
	}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (a *AutoRenewFundingRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := a.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if a.isVarSlice(_v) {
			a.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (a *AutoRenewFundingRequest) GetParametersJSON() ([]byte, error) {
	params, err := a.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (a *AutoRenewFundingRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (a *AutoRenewFundingRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (a *AutoRenewFundingRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (a *AutoRenewFundingRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (a *AutoRenewFundingRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := a.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (a *AutoRenewFundingRequest) GetPath() string {
	return "/v2/auth/w/funding/auto"
}

// Do generates the request object and send the request object to the API endpoint
func (a *AutoRenewFundingRequest) Do(ctx context.Context) (*AutoRenewFundingResponse, error) {

	params, err := a.GetParameters()
	if err != nil {
		return nil, err
	}
	query := url.Values{}

	var apiURL string

	apiURL = a.GetPath()

	req, err := a.client.NewAuthenticatedRequest(ctx, "POST", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := a.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse AutoRenewFundingResponse

	type responseUnmarshaler interface {
		Unmarshal(data []byte) error
	}

	if unmarshaler, ok := interface{}(&apiResponse).(responseUnmarshaler); ok {
		if err := unmarshaler.Unmarshal(response.Body); err != nil {
			return nil, err
		}
	} else {
		// The line below checks the content type, however, some API server might not send the correct content type header,
		// Hence, this is commented for backward compatibility
		// response.IsJSON()
		if err := response.DecodeJSON(&apiResponse); err != nil {
			return nil, err
		}
	}

	type responseValidator interface {
		Validate() error
	}

	if validator, ok := interface{}(&apiResponse).(responseValidator); ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	return &apiResponse, nil
}
