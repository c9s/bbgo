// Code generated by "requestgen -type GetOrderHistoryRequest -method POST -url /v2/auth/r/orders/hist -responseType []Order"; DO NOT EDIT.

package bfxapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
	"strconv"
	"time"
)

// Start sets
func (g *GetOrderHistoryRequest) Start(start time.Time) *GetOrderHistoryRequest {
	g.start = &start
	return g
}

// End sets
func (g *GetOrderHistoryRequest) End(end time.Time) *GetOrderHistoryRequest {
	g.end = &end
	return g
}

// Limit sets
func (g *GetOrderHistoryRequest) Limit(limit int) *GetOrderHistoryRequest {
	g.limit = &limit
	return g
}

// OrderId sets
func (g *GetOrderHistoryRequest) OrderId(orderId []int64) *GetOrderHistoryRequest {
	g.orderId = orderId
	return g
}

func (g *GetOrderHistoryRequest) AddOrderId(orderId ...int64) *GetOrderHistoryRequest {
	g.orderId = append(g.orderId, orderId...)
	return g
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (g *GetOrderHistoryRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		if g.isVarSlice(_v) {
			g.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (g *GetOrderHistoryRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check start field -> json key start
	if g.start != nil {
		start := *g.start

		// TEMPLATE check-required
		// END TEMPLATE check-required

		// assign parameter of start
		// convert time.Time to milliseconds time stamp
		params["start"] = strconv.FormatInt(start.UnixNano()/int64(time.Millisecond), 10)
	} else {
	}
	// check end field -> json key end
	if g.end != nil {
		end := *g.end

		// TEMPLATE check-required
		// END TEMPLATE check-required

		// assign parameter of end
		// convert time.Time to milliseconds time stamp
		params["end"] = strconv.FormatInt(end.UnixNano()/int64(time.Millisecond), 10)
	} else {
	}
	// check limit field -> json key limit
	if g.limit != nil {
		limit := *g.limit

		// TEMPLATE check-required
		if limit == 0 {
			limit = 2500
		}
		// END TEMPLATE check-required

		// assign parameter of limit
		params["limit"] = limit
	} else {
		limit := 2500

		// assign parameter of limit
		params["limit"] = limit
	}
	// check orderId field -> json key id
	orderId := g.orderId

	// TEMPLATE check-required
	// END TEMPLATE check-required

	// assign parameter of orderId
	if len(orderId) > 0 {
		params["id"] = orderId
	}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (g *GetOrderHistoryRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := g.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if g.isVarSlice(_v) {
			g.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (g *GetOrderHistoryRequest) GetParametersJSON() ([]byte, error) {
	params, err := g.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (g *GetOrderHistoryRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (g *GetOrderHistoryRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (g *GetOrderHistoryRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (g *GetOrderHistoryRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (g *GetOrderHistoryRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := g.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (g *GetOrderHistoryRequest) GetPath() string {
	return "/v2/auth/r/orders/hist"
}

// Do generates the request object and send the request object to the API endpoint
func (g *GetOrderHistoryRequest) Do(ctx context.Context) ([]Order, error) {

	params, err := g.GetParameters()
	if err != nil {
		return nil, err
	}
	query := url.Values{}

	var apiURL string

	apiURL = g.GetPath()

	req, err := g.client.NewAuthenticatedRequest(ctx, "POST", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := g.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse []Order

	type responseUnmarshaler interface {
		Unmarshal(data []byte) error
	}

	if unmarshaler, ok := interface{}(&apiResponse).(responseUnmarshaler); ok {
		if err := unmarshaler.Unmarshal(response.Body); err != nil {
			return nil, err
		}
	} else {
		// The line below checks the content type, however, some API server might not send the correct content type header,
		// Hence, this is commented for backward compatibility
		// response.IsJSON()
		if err := response.DecodeJSON(&apiResponse); err != nil {
			return nil, err
		}
	}

	type responseValidator interface {
		Validate() error
	}

	if validator, ok := interface{}(&apiResponse).(responseValidator); ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	return apiResponse, nil
}
