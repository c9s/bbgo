// Code generated by "requestgen -type GetDepositAddressRequest -method POST -url /v2/auth/w/deposit/address -responseType .DepositAddressResponse"; DO NOT EDIT.

package bfxapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
)

// Wallet sets wallet - Select the wallet from which to transfer (exchange, margin, funding (can also use the old labels which are exchange, trading and deposit respectively))
func (g *GetDepositAddressRequest) Wallet(wallet string) *GetDepositAddressRequest {
	g.wallet = wallet
	return g
}

// Method sets method - method of deposit (methods accepted: “bitcoin”, “litecoin”, “ethereum”, ...) For an up-to-date listing of supported currencies see: https://api-pub.bitfinex.com//v2/conf/pub:map:tx:method
func (g *GetDepositAddressRequest) Method(method string) *GetDepositAddressRequest {
	g.method = method
	return g
}

// OpRenew sets opRenew - Input 1 to generate a new deposit address (old addresses remain valid). Defaults to 0 if omitted, which will return the existing deposit address
func (g *GetDepositAddressRequest) OpRenew(opRenew int) *GetDepositAddressRequest {
	g.opRenew = &opRenew
	return g
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (g *GetDepositAddressRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		if g.isVarSlice(_v) {
			g.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (g *GetDepositAddressRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check wallet field -> json key wallet
	wallet := g.wallet

	// TEMPLATE check-required
	if len(wallet) == 0 {
	}
	// END TEMPLATE check-required

	// assign parameter of wallet
	params["wallet"] = wallet
	// check method field -> json key method
	method := g.method

	// TEMPLATE check-required
	if len(method) == 0 {
	}
	// END TEMPLATE check-required

	// assign parameter of method
	params["method"] = method
	// check opRenew field -> json key op_renew
	if g.opRenew != nil {
		opRenew := *g.opRenew

		// TEMPLATE check-required
		if opRenew == 0 {
		}
		// END TEMPLATE check-required

		// assign parameter of opRenew
		params["op_renew"] = opRenew
	} else {
	}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (g *GetDepositAddressRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := g.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if g.isVarSlice(_v) {
			g.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (g *GetDepositAddressRequest) GetParametersJSON() ([]byte, error) {
	params, err := g.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (g *GetDepositAddressRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (g *GetDepositAddressRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (g *GetDepositAddressRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (g *GetDepositAddressRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (g *GetDepositAddressRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := g.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (g *GetDepositAddressRequest) GetPath() string {
	return "/v2/auth/w/deposit/address"
}

// Do generates the request object and send the request object to the API endpoint
func (g *GetDepositAddressRequest) Do(ctx context.Context) (*DepositAddressResponse, error) {

	params, err := g.GetParameters()
	if err != nil {
		return nil, err
	}
	query := url.Values{}

	var apiURL string

	apiURL = g.GetPath()

	req, err := g.client.NewAuthenticatedRequest(ctx, "POST", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := g.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse DepositAddressResponse

	type responseUnmarshaler interface {
		Unmarshal(data []byte) error
	}

	if unmarshaler, ok := interface{}(&apiResponse).(responseUnmarshaler); ok {
		if err := unmarshaler.Unmarshal(response.Body); err != nil {
			return nil, err
		}
	} else {
		// The line below checks the content type, however, some API server might not send the correct content type header,
		// Hence, this is commented for backward compatibility
		// response.IsJSON()
		if err := response.DecodeJSON(&apiResponse); err != nil {
			return nil, err
		}
	}

	type responseValidator interface {
		Validate() error
	}

	if validator, ok := interface{}(&apiResponse).(responseValidator); ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	return &apiResponse, nil
}
