// Code generated by "requestgen -type GetCandlesRequest -method GET -url /v2/candles/:candle/:section -responseType .CandlesResponse"; DO NOT EDIT.

package bfxapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
)

// Sort sets sort: +1: sort in ascending order | -1: sort in descending order (by MTS field).
func (g *GetCandlesRequest) Sort(sort int) *GetCandlesRequest {
	g.sort = sort
	return g
}

// Start sets start: If start is given, only records with MTS >= start (milliseconds) will be given as response.
func (g *GetCandlesRequest) Start(start int64) *GetCandlesRequest {
	g.start = start
	return g
}

// End sets end: If end is given, only records with MTS <= end (milliseconds) will be given as response.
func (g *GetCandlesRequest) End(end int64) *GetCandlesRequest {
	g.end = end
	return g
}

// Limit sets limit: Number of records in response (max. 10000).
func (g *GetCandlesRequest) Limit(limit int) *GetCandlesRequest {
	g.limit = limit
	return g
}

// Candle sets
func (g *GetCandlesRequest) Candle(candle string) *GetCandlesRequest {
	g.candle = candle
	return g
}

// Section sets
func (g *GetCandlesRequest) Section(section string) *GetCandlesRequest {
	g.section = section
	return g
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (g *GetCandlesRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		if g.isVarSlice(_v) {
			g.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (g *GetCandlesRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check sort field -> json key sort
	sort := g.sort

	// TEMPLATE check-required
	if sort == 0 {
	}
	// END TEMPLATE check-required

	// assign parameter of sort
	params["sort"] = sort
	// check start field -> json key start
	start := g.start

	// TEMPLATE check-required
	if start == 0 {
	}
	// END TEMPLATE check-required

	// assign parameter of start
	params["start"] = start
	// check end field -> json key end
	end := g.end

	// TEMPLATE check-required
	if end == 0 {
	}
	// END TEMPLATE check-required

	// assign parameter of end
	params["end"] = end
	// check limit field -> json key limit
	limit := g.limit

	// TEMPLATE check-required
	if limit == 0 {
	}
	// END TEMPLATE check-required

	// assign parameter of limit
	params["limit"] = limit

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (g *GetCandlesRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := g.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if g.isVarSlice(_v) {
			g.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (g *GetCandlesRequest) GetParametersJSON() ([]byte, error) {
	params, err := g.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (g *GetCandlesRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check candle field -> json key candle
	candle := g.candle

	// TEMPLATE check-required
	if len(candle) == 0 {
	}
	// END TEMPLATE check-required

	// assign parameter of candle
	params["candle"] = candle
	// check section field -> json key section
	section := g.section

	// TEMPLATE check-required
	if len(section) == 0 {
	}
	// END TEMPLATE check-required

	// TEMPLATE check-valid-values
	switch section {
	case "last", "hist":
		params["section"] = section

	default:
		return nil, fmt.Errorf("section value %v is invalid", section)

	}
	// END TEMPLATE check-valid-values

	// assign parameter of section
	params["section"] = section

	return params, nil
}

func (g *GetCandlesRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (g *GetCandlesRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (g *GetCandlesRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (g *GetCandlesRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := g.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (g *GetCandlesRequest) GetPath() string {
	return "/v2/candles/:candle/:section"
}

// Do generates the request object and send the request object to the API endpoint
func (g *GetCandlesRequest) Do(ctx context.Context) (CandlesResponse, error) {

	// empty params for GET operation
	var params interface{}
	query, err := g.GetParametersQuery()
	if err != nil {
		return nil, err
	}

	var apiURL string

	apiURL = g.GetPath()
	slugs, err := g.GetSlugsMap()
	if err != nil {
		return nil, err
	}

	apiURL = g.applySlugsToUrl(apiURL, slugs)

	req, err := g.client.NewRequest(ctx, "GET", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := g.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse CandlesResponse

	type responseUnmarshaler interface {
		Unmarshal(data []byte) error
	}

	if unmarshaler, ok := interface{}(&apiResponse).(responseUnmarshaler); ok {
		if err := unmarshaler.Unmarshal(response.Body); err != nil {
			return nil, err
		}
	} else {
		// The line below checks the content type, however, some API server might not send the correct content type header,
		// Hence, this is commented for backward compatibility
		// response.IsJSON()
		if err := response.DecodeJSON(&apiResponse); err != nil {
			return nil, err
		}
	}

	type responseValidator interface {
		Validate() error
	}

	if validator, ok := interface{}(&apiResponse).(responseValidator); ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	return apiResponse, nil
}
