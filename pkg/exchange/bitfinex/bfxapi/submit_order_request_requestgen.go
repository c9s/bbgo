// Code generated by "requestgen -type SubmitOrderRequest -method POST -url /v2/auth/w/order/submit -responseType .SubmitOrderResponse"; DO NOT EDIT.

package bfxapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
)

func (s *SubmitOrderRequest) Symbol(symbol string) *SubmitOrderRequest {
	s.symbol = symbol
	return s
}

func (s *SubmitOrderRequest) Amount(amount string) *SubmitOrderRequest {
	s.amount = amount
	return s
}

func (s *SubmitOrderRequest) Price(price string) *SubmitOrderRequest {
	s.price = price
	return s
}

func (s *SubmitOrderRequest) OrderType(orderType string) *SubmitOrderRequest {
	s.orderType = orderType
	return s
}

func (s *SubmitOrderRequest) GroupId(groupId int64) *SubmitOrderRequest {
	s.groupId = groupId
	return s
}

func (s *SubmitOrderRequest) ClientOrderId(clientOrderId int64) *SubmitOrderRequest {
	s.clientOrderId = clientOrderId
	return s
}

func (s *SubmitOrderRequest) Flags(flags OrderFlag) *SubmitOrderRequest {
	s.flags = flags
	return s
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (s *SubmitOrderRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		if s.isVarSlice(_v) {
			s.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (s *SubmitOrderRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check symbol field -> json key symbol
	symbol := s.symbol

	// TEMPLATE check-required
	if len(symbol) == 0 {
	}
	// END TEMPLATE check-required

	// assign parameter of symbol
	params["symbol"] = symbol
	// check amount field -> json key amount
	amount := s.amount

	// TEMPLATE check-required
	if len(amount) == 0 {
	}
	// END TEMPLATE check-required

	// assign parameter of amount
	params["amount"] = amount
	// check price field -> json key price
	price := s.price

	// TEMPLATE check-required
	if len(price) == 0 {
	}
	// END TEMPLATE check-required

	// assign parameter of price
	params["price"] = price
	// check orderType field -> json key type
	orderType := s.orderType

	// TEMPLATE check-required
	if len(orderType) == 0 {
	}
	// END TEMPLATE check-required

	// assign parameter of orderType
	params["type"] = orderType
	// check groupId field -> json key gid
	groupId := s.groupId

	// TEMPLATE check-required
	if groupId == 0 {
	}
	// END TEMPLATE check-required

	// assign parameter of groupId
	params["gid"] = groupId
	// check clientOrderId field -> json key cid
	clientOrderId := s.clientOrderId

	// TEMPLATE check-required
	if clientOrderId == 0 {
	}
	// END TEMPLATE check-required

	// assign parameter of clientOrderId
	params["cid"] = clientOrderId
	// check flags field -> json key flags
	flags := s.flags

	// TEMPLATE check-required
	if flags == 0 {
	}
	// END TEMPLATE check-required

	// TEMPLATE check-valid-values
	switch flags {
	case OrderFlagHidden, OrderFlagClose, OrderFlagReduceOnly, OrderFlagPostOnly, OrderFlagOCO, OrderFlagNoVarRate:
		params["flags"] = flags

	default:
		return nil, fmt.Errorf("flags value %v is invalid", flags)

	}
	// END TEMPLATE check-valid-values

	// assign parameter of flags
	params["flags"] = flags

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (s *SubmitOrderRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := s.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if s.isVarSlice(_v) {
			s.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (s *SubmitOrderRequest) GetParametersJSON() ([]byte, error) {
	params, err := s.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (s *SubmitOrderRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (s *SubmitOrderRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (s *SubmitOrderRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (s *SubmitOrderRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (s *SubmitOrderRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := s.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (s *SubmitOrderRequest) GetPath() string {
	return "/v2/auth/w/order/submit"
}

// Do generates the request object and send the request object to the API endpoint
func (s *SubmitOrderRequest) Do(ctx context.Context) (*SubmitOrderResponse, error) {

	params, err := s.GetParameters()
	if err != nil {
		return nil, err
	}
	query := url.Values{}

	var apiURL string

	apiURL = s.GetPath()

	req, err := s.client.NewAuthenticatedRequest(ctx, "POST", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := s.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse SubmitOrderResponse

	type responseUnmarshaler interface {
		Unmarshal(data []byte) error
	}

	if unmarshaler, ok := interface{}(&apiResponse).(responseUnmarshaler); ok {
		if err := unmarshaler.Unmarshal(response.Body); err != nil {
			return nil, err
		}
	} else {
		// The line below checks the content type, however, some API server might not send the correct content type header,
		// Hence, this is commented for backward compatibility
		// response.IsJSON()
		if err := response.DecodeJSON(&apiResponse); err != nil {
			return nil, err
		}
	}

	type responseValidator interface {
		Validate() error
	}

	if validator, ok := interface{}(&apiResponse).(responseValidator); ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	return &apiResponse, nil
}
