// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"

	bybitapi "github.com/c9s/bbgo/pkg/exchange/bybit/bybitapi"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// GetInstruInfoCategory provides a mock function with given fields: category
func (_m *Client) GetInstruInfoCategory(category bybitapi.Category) bybitapi.GetInstrumentsInfoRequester {
	ret := _m.Called(category)

	var r0 bybitapi.GetInstrumentsInfoRequester
	if rf, ok := ret.Get(0).(func(bybitapi.Category) bybitapi.GetInstrumentsInfoRequester); ok {
		r0 = rf(category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bybitapi.GetInstrumentsInfoRequester)
		}
	}

	return r0
}

// Client_GetInstruInfoCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstruInfoCategory'
type Client_GetInstruInfoCategory_Call struct {
	*mock.Call
}

// GetInstruInfoCategory is a helper method to define mock.On call
//   - category bybitapi.Category
func (_e *Client_Expecter) GetInstruInfoCategory(category interface{}) *Client_GetInstruInfoCategory_Call {
	return &Client_GetInstruInfoCategory_Call{Call: _e.mock.On("GetInstruInfoCategory", category)}
}

func (_c *Client_GetInstruInfoCategory_Call) Run(run func(category bybitapi.Category)) *Client_GetInstruInfoCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bybitapi.Category))
	})
	return _c
}

func (_c *Client_GetInstruInfoCategory_Call) Return(_a0 bybitapi.GetInstrumentsInfoRequester) *Client_GetInstruInfoCategory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_GetInstruInfoCategory_Call) RunAndReturn(run func(bybitapi.Category) bybitapi.GetInstrumentsInfoRequester) *Client_GetInstruInfoCategory_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstruInfoCursor provides a mock function with given fields: cursor
func (_m *Client) GetInstruInfoCursor(cursor string) bybitapi.GetInstrumentsInfoRequester {
	ret := _m.Called(cursor)

	var r0 bybitapi.GetInstrumentsInfoRequester
	if rf, ok := ret.Get(0).(func(string) bybitapi.GetInstrumentsInfoRequester); ok {
		r0 = rf(cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bybitapi.GetInstrumentsInfoRequester)
		}
	}

	return r0
}

// Client_GetInstruInfoCursor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstruInfoCursor'
type Client_GetInstruInfoCursor_Call struct {
	*mock.Call
}

// GetInstruInfoCursor is a helper method to define mock.On call
//   - cursor string
func (_e *Client_Expecter) GetInstruInfoCursor(cursor interface{}) *Client_GetInstruInfoCursor_Call {
	return &Client_GetInstruInfoCursor_Call{Call: _e.mock.On("GetInstruInfoCursor", cursor)}
}

func (_c *Client_GetInstruInfoCursor_Call) Run(run func(cursor string)) *Client_GetInstruInfoCursor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetInstruInfoCursor_Call) Return(_a0 bybitapi.GetInstrumentsInfoRequester) *Client_GetInstruInfoCursor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_GetInstruInfoCursor_Call) RunAndReturn(run func(string) bybitapi.GetInstrumentsInfoRequester) *Client_GetInstruInfoCursor_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstruInfoDo provides a mock function with given fields: ctx
func (_m *Client) GetInstruInfoDo(ctx context.Context) (*bybitapi.InstrumentsInfo, error) {
	ret := _m.Called(ctx)

	var r0 *bybitapi.InstrumentsInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*bybitapi.InstrumentsInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *bybitapi.InstrumentsInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bybitapi.InstrumentsInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetInstruInfoDo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstruInfoDo'
type Client_GetInstruInfoDo_Call struct {
	*mock.Call
}

// GetInstruInfoDo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) GetInstruInfoDo(ctx interface{}) *Client_GetInstruInfoDo_Call {
	return &Client_GetInstruInfoDo_Call{Call: _e.mock.On("GetInstruInfoDo", ctx)}
}

func (_c *Client_GetInstruInfoDo_Call) Run(run func(ctx context.Context)) *Client_GetInstruInfoDo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_GetInstruInfoDo_Call) Return(_a0 *bybitapi.InstrumentsInfo, _a1 error) *Client_GetInstruInfoDo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetInstruInfoDo_Call) RunAndReturn(run func(context.Context) (*bybitapi.InstrumentsInfo, error)) *Client_GetInstruInfoDo_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstruInfoLimit provides a mock function with given fields: limit
func (_m *Client) GetInstruInfoLimit(limit uint64) bybitapi.GetInstrumentsInfoRequester {
	ret := _m.Called(limit)

	var r0 bybitapi.GetInstrumentsInfoRequester
	if rf, ok := ret.Get(0).(func(uint64) bybitapi.GetInstrumentsInfoRequester); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bybitapi.GetInstrumentsInfoRequester)
		}
	}

	return r0
}

// Client_GetInstruInfoLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstruInfoLimit'
type Client_GetInstruInfoLimit_Call struct {
	*mock.Call
}

// GetInstruInfoLimit is a helper method to define mock.On call
//   - limit uint64
func (_e *Client_Expecter) GetInstruInfoLimit(limit interface{}) *Client_GetInstruInfoLimit_Call {
	return &Client_GetInstruInfoLimit_Call{Call: _e.mock.On("GetInstruInfoLimit", limit)}
}

func (_c *Client_GetInstruInfoLimit_Call) Run(run func(limit uint64)) *Client_GetInstruInfoLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *Client_GetInstruInfoLimit_Call) Return(_a0 bybitapi.GetInstrumentsInfoRequester) *Client_GetInstruInfoLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_GetInstruInfoLimit_Call) RunAndReturn(run func(uint64) bybitapi.GetInstrumentsInfoRequester) *Client_GetInstruInfoLimit_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstruInfoSymbol provides a mock function with given fields: symbol
func (_m *Client) GetInstruInfoSymbol(symbol string) bybitapi.GetInstrumentsInfoRequester {
	ret := _m.Called(symbol)

	var r0 bybitapi.GetInstrumentsInfoRequester
	if rf, ok := ret.Get(0).(func(string) bybitapi.GetInstrumentsInfoRequester); ok {
		r0 = rf(symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bybitapi.GetInstrumentsInfoRequester)
		}
	}

	return r0
}

// Client_GetInstruInfoSymbol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstruInfoSymbol'
type Client_GetInstruInfoSymbol_Call struct {
	*mock.Call
}

// GetInstruInfoSymbol is a helper method to define mock.On call
//   - symbol string
func (_e *Client_Expecter) GetInstruInfoSymbol(symbol interface{}) *Client_GetInstruInfoSymbol_Call {
	return &Client_GetInstruInfoSymbol_Call{Call: _e.mock.On("GetInstruInfoSymbol", symbol)}
}

func (_c *Client_GetInstruInfoSymbol_Call) Run(run func(symbol string)) *Client_GetInstruInfoSymbol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetInstruInfoSymbol_Call) Return(_a0 bybitapi.GetInstrumentsInfoRequester) *Client_GetInstruInfoSymbol_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_GetInstruInfoSymbol_Call) RunAndReturn(run func(string) bybitapi.GetInstrumentsInfoRequester) *Client_GetInstruInfoSymbol_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
