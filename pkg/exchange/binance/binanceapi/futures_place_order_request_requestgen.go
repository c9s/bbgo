// Code generated by "requestgen -method POST -url /fapi/v1/order -type FuturesPlaceOrderRequest -responseType []FuturesPositionRisk"; DO NOT EDIT.

package binanceapi

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/adshao/go-binance/v2"
	"github.com/c9s/bbgo/pkg/fixedpoint"
	"net/url"
	"reflect"
	"regexp"
)

func (f *FuturesPlaceOrderRequest) Symbol(symbol string) *FuturesPlaceOrderRequest {
	f.symbol = symbol
	return f
}

func (f *FuturesPlaceOrderRequest) Side(side binance.SideType) *FuturesPlaceOrderRequest {
	f.side = side
	return f
}

func (f *FuturesPlaceOrderRequest) PositionSide(positionSide PositionSide) *FuturesPlaceOrderRequest {
	f.positionSide = positionSide
	return f
}

func (f *FuturesPlaceOrderRequest) Quantity(quantity fixedpoint.Value) *FuturesPlaceOrderRequest {
	f.quantity = &quantity
	return f
}

func (f *FuturesPlaceOrderRequest) Price(price fixedpoint.Value) *FuturesPlaceOrderRequest {
	f.price = &price
	return f
}

func (f *FuturesPlaceOrderRequest) StopPrice(stopPrice fixedpoint.Value) *FuturesPlaceOrderRequest {
	f.stopPrice = &stopPrice
	return f
}

func (f *FuturesPlaceOrderRequest) ActivationPrice(activationPrice fixedpoint.Value) *FuturesPlaceOrderRequest {
	f.activationPrice = &activationPrice
	return f
}

func (f *FuturesPlaceOrderRequest) CallbackRate(callbackRate fixedpoint.Value) *FuturesPlaceOrderRequest {
	f.callbackRate = &callbackRate
	return f
}

func (f *FuturesPlaceOrderRequest) PriceProtect(priceProtect string) *FuturesPlaceOrderRequest {
	f.priceProtect = &priceProtect
	return f
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (f *FuturesPlaceOrderRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		query.Add(_k, fmt.Sprintf("%v", _v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (f *FuturesPlaceOrderRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check symbol field -> json key symbol
	symbol := f.symbol

	// assign parameter of symbol
	params["symbol"] = symbol
	// check side field -> json key side
	side := f.side

	// assign parameter of side
	params["side"] = side
	// check positionSide field -> json key positionSide
	positionSide := f.positionSide

	// TEMPLATE check-valid-values
	switch positionSide {
	case PositionSideLong, PositionSideShort, PositionSideBoth:
		params["positionSide"] = positionSide

	default:
		return nil, fmt.Errorf("positionSide value %v is invalid", positionSide)

	}
	// END TEMPLATE check-valid-values

	// assign parameter of positionSide
	params["positionSide"] = positionSide
	// check quantity field -> json key quantity
	if f.quantity != nil {
		quantity := *f.quantity

		// assign parameter of quantity
		params["quantity"] = quantity
	} else {
	}
	// check price field -> json key price
	if f.price != nil {
		price := *f.price

		// assign parameter of price
		params["price"] = price
	} else {
	}
	// check stopPrice field -> json key stopPrice
	if f.stopPrice != nil {
		stopPrice := *f.stopPrice

		// assign parameter of stopPrice
		params["stopPrice"] = stopPrice
	} else {
	}
	// check activationPrice field -> json key activationPrice
	if f.activationPrice != nil {
		activationPrice := *f.activationPrice

		// assign parameter of activationPrice
		params["activationPrice"] = activationPrice
	} else {
	}
	// check callbackRate field -> json key callbackRate
	if f.callbackRate != nil {
		callbackRate := *f.callbackRate

		// assign parameter of callbackRate
		params["callbackRate"] = callbackRate
	} else {
	}
	// check priceProtect field -> json key priceProtect
	if f.priceProtect != nil {
		priceProtect := *f.priceProtect

		// assign parameter of priceProtect
		params["priceProtect"] = priceProtect
	} else {
	}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (f *FuturesPlaceOrderRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := f.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if f.isVarSlice(_v) {
			f.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (f *FuturesPlaceOrderRequest) GetParametersJSON() ([]byte, error) {
	params, err := f.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (f *FuturesPlaceOrderRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (f *FuturesPlaceOrderRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (f *FuturesPlaceOrderRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (f *FuturesPlaceOrderRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (f *FuturesPlaceOrderRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := f.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (f *FuturesPlaceOrderRequest) GetPath() string {
	return "/fapi/v1/order"
}

// Do generates the request object and send the request object to the API endpoint
func (f *FuturesPlaceOrderRequest) Do(ctx context.Context) ([]FuturesPositionRisk, error) {

	params, err := f.GetParameters()
	if err != nil {
		return nil, err
	}
	query := url.Values{}

	var apiURL string

	apiURL = f.GetPath()

	req, err := f.client.NewAuthenticatedRequest(ctx, "POST", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := f.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse []FuturesPositionRisk

	type responseUnmarshaler interface {
		Unmarshal(data []byte) error
	}

	if unmarshaler, ok := interface{}(&apiResponse).(responseUnmarshaler); ok {
		if err := unmarshaler.Unmarshal(response.Body); err != nil {
			return nil, err
		}
	} else {
		// The line below checks the content type, however, some API server might not send the correct content type header,
		// Hence, this is commented for backward compatibility
		// response.IsJSON()
		if err := response.DecodeJSON(&apiResponse); err != nil {
			return nil, err
		}
	}

	type responseValidator interface {
		Validate() error
	}

	if validator, ok := interface{}(&apiResponse).(responseValidator); ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	return apiResponse, nil
}
