// Code generated by "requestgen -method POST -url /sapi/v1/margin/borrow-repay -type PlaceMarginOrderRequest -responseType .TransferResponse"; DO NOT EDIT.

package binanceapi

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/c9s/bbgo/pkg/fixedpoint"
	"net/url"
	"reflect"
	"regexp"
)

func (p *PlaceMarginOrderRequest) Asset(asset string) *PlaceMarginOrderRequest {
	p.asset = asset
	return p
}

func (p *PlaceMarginOrderRequest) IsIsolated(isIsolated bool) *PlaceMarginOrderRequest {
	p.isIsolated = isIsolated
	return p
}

func (p *PlaceMarginOrderRequest) Symbol(symbol string) *PlaceMarginOrderRequest {
	p.symbol = &symbol
	return p
}

func (p *PlaceMarginOrderRequest) Amount(amount fixedpoint.Value) *PlaceMarginOrderRequest {
	p.amount = amount
	return p
}

func (p *PlaceMarginOrderRequest) SetBorrowRepayType(BorrowRepayType BorrowRepayType) *PlaceMarginOrderRequest {
	p.BorrowRepayType = BorrowRepayType
	return p
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (p *PlaceMarginOrderRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		query.Add(_k, fmt.Sprintf("%v", _v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (p *PlaceMarginOrderRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check asset field -> json key asset
	asset := p.asset

	// assign parameter of asset
	params["asset"] = asset
	// check isIsolated field -> json key isIsolated
	isIsolated := p.isIsolated

	// assign parameter of isIsolated
	params["isIsolated"] = isIsolated
	// check symbol field -> json key symbol
	if p.symbol != nil {
		symbol := *p.symbol

		// assign parameter of symbol
		params["symbol"] = symbol
	} else {
	}
	// check amount field -> json key amount
	amount := p.amount

	// assign parameter of amount
	params["amount"] = amount
	// check BorrowRepayType field -> json key type
	BorrowRepayType := p.BorrowRepayType

	// TEMPLATE check-valid-values
	switch BorrowRepayType {
	case BorrowRepayTypeBorrow, BorrowRepayTypeRepay:
		params["type"] = BorrowRepayType

	default:
		return nil, fmt.Errorf("type value %v is invalid", BorrowRepayType)

	}
	// END TEMPLATE check-valid-values

	// assign parameter of BorrowRepayType
	params["type"] = BorrowRepayType

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (p *PlaceMarginOrderRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := p.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if p.isVarSlice(_v) {
			p.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (p *PlaceMarginOrderRequest) GetParametersJSON() ([]byte, error) {
	params, err := p.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (p *PlaceMarginOrderRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (p *PlaceMarginOrderRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (p *PlaceMarginOrderRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (p *PlaceMarginOrderRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (p *PlaceMarginOrderRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := p.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (p *PlaceMarginOrderRequest) GetPath() string {
	return "/sapi/v1/margin/borrow-repay"
}

// Do generates the request object and send the request object to the API endpoint
func (p *PlaceMarginOrderRequest) Do(ctx context.Context) (*TransferResponse, error) {

	params, err := p.GetParameters()
	if err != nil {
		return nil, err
	}
	query := url.Values{}

	var apiURL string

	apiURL = p.GetPath()

	req, err := p.client.NewAuthenticatedRequest(ctx, "POST", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := p.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse TransferResponse
	if err := response.DecodeJSON(&apiResponse); err != nil {
		return nil, err
	}

	type responseValidator interface {
		Validate() error
	}
	validator, ok := interface{}(apiResponse).(responseValidator)
	if ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	return &apiResponse, nil
}
