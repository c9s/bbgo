// Code generated by "requestgen -method POST -url /api/v3/wallet/:walletType/order -type CreateWalletOrderRequest -responseType .Order"; DO NOT EDIT.

package v3

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
	"sync"
)

/*
 * Market sets
 */
func (c *CreateWalletOrderRequest) Market(market string) *CreateWalletOrderRequest {
	c.market = market
	return c
}

/*
 * Side sets
 */
func (c *CreateWalletOrderRequest) Side(side string) *CreateWalletOrderRequest {
	c.side = side
	return c
}

/*
 * Volume sets
 */
func (c *CreateWalletOrderRequest) Volume(volume string) *CreateWalletOrderRequest {
	c.volume = volume
	return c
}

/*
 * OrderType sets
 */
func (c *CreateWalletOrderRequest) OrderType(orderType OrderType) *CreateWalletOrderRequest {
	c.orderType = orderType
	return c
}

/*
 * Price sets
 */
func (c *CreateWalletOrderRequest) Price(price string) *CreateWalletOrderRequest {
	c.price = &price
	return c
}

/*
 * StopPrice sets
 */
func (c *CreateWalletOrderRequest) StopPrice(stopPrice string) *CreateWalletOrderRequest {
	c.stopPrice = &stopPrice
	return c
}

/*
 * ClientOrderID sets
 */
func (c *CreateWalletOrderRequest) ClientOrderID(clientOrderID string) *CreateWalletOrderRequest {
	c.clientOrderID = &clientOrderID
	return c
}

/*
 * GroupID sets
 */
func (c *CreateWalletOrderRequest) GroupID(groupID string) *CreateWalletOrderRequest {
	c.groupID = &groupID
	return c
}

/*
 * WalletType sets
 */
func (c *CreateWalletOrderRequest) WalletType(walletType WalletType) *CreateWalletOrderRequest {
	c.walletType = walletType
	return c
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (c *CreateWalletOrderRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		if c.isVarSlice(_v) {
			c.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (c *CreateWalletOrderRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check market field -> json key market
	market := c.market

	// TEMPLATE check-required
	if len(market) == 0 {
		return nil, fmt.Errorf("market is required, empty string given")
	}
	// END TEMPLATE check-required

	// assign parameter of market
	params["market"] = market
	// check side field -> json key side
	side := c.side

	// TEMPLATE check-required
	if len(side) == 0 {
		return nil, fmt.Errorf("side is required, empty string given")
	}
	// END TEMPLATE check-required

	// assign parameter of side
	params["side"] = side
	// check volume field -> json key volume
	volume := c.volume

	// TEMPLATE check-required
	if len(volume) == 0 {
		return nil, fmt.Errorf("volume is required, empty string given")
	}
	// END TEMPLATE check-required

	// assign parameter of volume
	params["volume"] = volume
	// check orderType field -> json key ord_type
	orderType := c.orderType

	// TEMPLATE check-required
	// END TEMPLATE check-required

	// assign parameter of orderType
	params["ord_type"] = orderType
	// check price field -> json key price
	if c.price != nil {
		price := *c.price

		// TEMPLATE check-required
		if len(price) == 0 {
		}
		// END TEMPLATE check-required

		// assign parameter of price
		params["price"] = price
	} else {
	}
	// check stopPrice field -> json key stop_price
	if c.stopPrice != nil {
		stopPrice := *c.stopPrice

		// TEMPLATE check-required
		if len(stopPrice) == 0 {
		}
		// END TEMPLATE check-required

		// assign parameter of stopPrice
		params["stop_price"] = stopPrice
	} else {
	}
	// check clientOrderID field -> json key client_oid
	if c.clientOrderID != nil {
		clientOrderID := *c.clientOrderID

		// TEMPLATE check-required
		if len(clientOrderID) == 0 {
		}
		// END TEMPLATE check-required

		// assign parameter of clientOrderID
		params["client_oid"] = clientOrderID
	} else {
	}
	// check groupID field -> json key group_id
	if c.groupID != nil {
		groupID := *c.groupID

		// TEMPLATE check-required
		if len(groupID) == 0 {
		}
		// END TEMPLATE check-required

		// assign parameter of groupID
		params["group_id"] = groupID
	} else {
	}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (c *CreateWalletOrderRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := c.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if c.isVarSlice(_v) {
			c.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (c *CreateWalletOrderRequest) GetParametersJSON() ([]byte, error) {
	params, err := c.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (c *CreateWalletOrderRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check walletType field -> json key walletType
	walletType := c.walletType

	// TEMPLATE check-required
	// END TEMPLATE check-required

	// assign parameter of walletType
	params["walletType"] = walletType

	return params, nil
}

var CreateWalletOrderRequestSlugReCache sync.Map

func (c *CreateWalletOrderRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		var needleRE *regexp.Regexp

		if cached, ok := CreateWalletOrderRequestSlugReCache.Load(_k); ok {
			needleRE = cached.(*regexp.Regexp)
		} else {
			needleRE = regexp.MustCompile(":" + _k + "\\b")
			CreateWalletOrderRequestSlugReCache.Store(_k, needleRE)
		}

		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (c *CreateWalletOrderRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (c *CreateWalletOrderRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (c *CreateWalletOrderRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := c.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (c *CreateWalletOrderRequest) GetPath() string {
	return "/api/v3/wallet/:walletType/order"
}

// Do generates the request object and send the request object to the API endpoint
func (c *CreateWalletOrderRequest) Do(ctx context.Context) (*Order, error) {

	params, err := c.GetParameters()
	if err != nil {
		return nil, err
	}
	query := url.Values{}

	var apiURL string

	apiURL = c.GetPath()
	slugs, err := c.GetSlugsMap()
	if err != nil {
		return nil, err
	}

	apiURL = c.applySlugsToUrl(apiURL, slugs)

	req, err := c.client.NewAuthenticatedRequest(ctx, "POST", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := c.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse Order

	type responseUnmarshaler interface {
		Unmarshal(data []byte) error
	}

	if unmarshaler, ok := interface{}(&apiResponse).(responseUnmarshaler); ok {
		if err := unmarshaler.Unmarshal(response.Body); err != nil {
			return nil, err
		}
	} else {
		// The line below checks the content type, however, some API server might not send the correct content type header,
		// Hence, this is commented for backward compatibility
		// response.IsJSON()
		if err := response.DecodeJSON(&apiResponse); err != nil {
			return nil, err
		}
	}

	type responseValidator interface {
		Validate() error
	}

	if validator, ok := interface{}(&apiResponse).(responseValidator); ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	return &apiResponse, nil
}
