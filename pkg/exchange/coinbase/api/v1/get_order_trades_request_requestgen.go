// Code generated by "requestgen -method GET -url /fills -rateLimiter 1+20/2s -type GetOrderTradesRequest -responseType .TradeSnapshot"; DO NOT EDIT.

package coinbase

import (
	"context"
	"encoding/json"
	"fmt"
	"golang.org/x/time/rate"
	"net/url"
	"reflect"
	"regexp"
)

var GetOrderTradesRequestLimiter = rate.NewLimiter(10, 1)

func (g *GetOrderTradesRequest) OrderID(orderID string) *GetOrderTradesRequest {
	g.orderID = orderID
	return g
}

func (g *GetOrderTradesRequest) ProductID(productID string) *GetOrderTradesRequest {
	g.productID = productID
	return g
}

func (g *GetOrderTradesRequest) Limit(limit int) *GetOrderTradesRequest {
	g.limit = limit
	return g
}

func (g *GetOrderTradesRequest) Before(before uint64) *GetOrderTradesRequest {
	g.before = &before
	return g
}

func (g *GetOrderTradesRequest) After(after uint64) *GetOrderTradesRequest {
	g.after = &after
	return g
}

func (g *GetOrderTradesRequest) MarketType(marketType MarketType) *GetOrderTradesRequest {
	g.marketType = &marketType
	return g
}

func (g *GetOrderTradesRequest) StartDate(startDate string) *GetOrderTradesRequest {
	g.startDate = &startDate
	return g
}

func (g *GetOrderTradesRequest) EndDate(endDate string) *GetOrderTradesRequest {
	g.endDate = &endDate
	return g
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (g *GetOrderTradesRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		query.Add(_k, fmt.Sprintf("%v", _v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (g *GetOrderTradesRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check orderID field -> json key order_id
	orderID := g.orderID

	// assign parameter of orderID
	params["order_id"] = orderID
	// check productID field -> json key product_id
	productID := g.productID

	// assign parameter of productID
	params["product_id"] = productID
	// check limit field -> json key limit
	limit := g.limit

	// assign parameter of limit
	params["limit"] = limit
	// check before field -> json key before
	if g.before != nil {
		before := *g.before

		// assign parameter of before
		params["before"] = before
	} else {
	}
	// check after field -> json key after
	if g.after != nil {
		after := *g.after

		// assign parameter of after
		params["after"] = after
	} else {
	}
	// check marketType field -> json key market_type
	if g.marketType != nil {
		marketType := *g.marketType

		// TEMPLATE check-valid-values
		switch marketType {
		case MarketTypeSpot, MarketTypeRfq:
			params["market_type"] = marketType

		default:
			return nil, fmt.Errorf("market_type value %v is invalid", marketType)

		}
		// END TEMPLATE check-valid-values

		// assign parameter of marketType
		params["market_type"] = marketType
	} else {
	}
	// check startDate field -> json key start_date
	if g.startDate != nil {
		startDate := *g.startDate

		// assign parameter of startDate
		params["start_date"] = startDate
	} else {
	}
	// check endDate field -> json key end_date
	if g.endDate != nil {
		endDate := *g.endDate

		// assign parameter of endDate
		params["end_date"] = endDate
	} else {
	}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (g *GetOrderTradesRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := g.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if g.isVarSlice(_v) {
			g.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (g *GetOrderTradesRequest) GetParametersJSON() ([]byte, error) {
	params, err := g.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (g *GetOrderTradesRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (g *GetOrderTradesRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (g *GetOrderTradesRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (g *GetOrderTradesRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (g *GetOrderTradesRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := g.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (g *GetOrderTradesRequest) GetPath() string {
	return "/fills"
}

// Do generates the request object and send the request object to the API endpoint
func (g *GetOrderTradesRequest) Do(ctx context.Context) (TradeSnapshot, error) {
	if err := GetOrderTradesRequestLimiter.Wait(ctx); err != nil {
		return nil, err
	}

	// empty params for GET operation
	var params interface{}
	query, err := g.GetParametersQuery()
	if err != nil {
		return nil, err
	}

	var apiURL string

	apiURL = g.GetPath()

	req, err := g.client.NewAuthenticatedRequest(ctx, "GET", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := g.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse TradeSnapshot

	type responseUnmarshaler interface {
		Unmarshal(data []byte) error
	}

	if unmarshaler, ok := interface{}(&apiResponse).(responseUnmarshaler); ok {
		if err := unmarshaler.Unmarshal(response.Body); err != nil {
			return nil, err
		}
	} else {
		// The line below checks the content type, however, some API server might not send the correct content type header,
		// Hence, this is commented for backward compatibility
		// response.IsJSON()
		if err := response.DecodeJSON(&apiResponse); err != nil {
			return nil, err
		}
	}

	type responseValidator interface {
		Validate() error
	}

	if validator, ok := interface{}(&apiResponse).(responseValidator); ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	return apiResponse, nil
}
